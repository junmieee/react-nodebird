{"ast":null,"code":"import { all, delay, put, takeLatest, fork, throttle, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\nimport shorId from 'shortid';\nimport { generateDummyPost } from '../reducers/post';\nfunction uploadImagesAPI(data) {\n  return axios.post('/post/images', data);\n}\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n;\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`);\n}\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LIKE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n;\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n;\nfunction addPostAPI(data) {\n  return axios.post('/post', {\n    content: data\n  });\n}\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n;\nfunction loadPostsAPI() {\n  return axios.get(`/post`);\n}\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.data);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction removePostAPI(data) {\n  return axios.delete(`/post/${data}`, data);\n}\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n;\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data); // POST /post/1/comment\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\nfunction* watchLikePost() {\n  yield throttle(2000, LIKE_POST_REQUEST, likePost);\n}\n;\nfunction* watchUnlikePost() {\n  yield throttle(2000, UNLIKE_POST_REQUEST, unlikePost);\n}\n;\nfunction* watchLoadPost() {\n  yield throttle(2000, LOAD_POSTS_REQUEST, loadPosts);\n}\n;\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n;\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n;\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nexport default function* postSaga() {\n  yield all([fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment), fork(watchLoadPost)]);\n}","map":{"version":3,"names":["all","delay","put","takeLatest","fork","throttle","call","axios","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","LIKE_POST_REQUEST","UNLIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","shorId","generateDummyPost","uploadImagesAPI","data","post","uploadImages","action","result","type","err","response","likePostAPI","patch","likePost","unlikePostAPI","delete","unlikePost","addPostAPI","content","addPost","id","loadPostsAPI","get","loadPosts","console","error","removePostAPI","removePost","addCommentAPI","postId","addComment","watchUploadImages","watchLikePost","watchUnlikePost","watchLoadPost","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"sources":["/Users/junmishin/Desktop/projects/nobird/front/sagas/post.js"],"sourcesContent":["import { all, delay, put, takeLatest, fork, throttle, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport {\n    ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST,\n    ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE\n\n} from '../reducers/post'\n\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\nimport shorId from 'shortid';\nimport { generateDummyPost } from '../reducers/post'\n\n\n\nfunction uploadImagesAPI(data) {\n    return axios.post('/post/images', data)\n}\n\nfunction* uploadImages(action) {\n    try {\n        const result = yield call(uploadImagesAPI, action.data);\n\n        yield put({\n            type: UPLOAD_IMAGES_SUCCESS,\n            data: result.data,\n        });\n\n    }\n    catch (err) {\n        yield put({\n            type: UPLOAD_IMAGES_FAILURE,\n            data: err.response.data,\n        })\n    }\n};\n\n\n\nfunction likePostAPI(data) {\n    return axios.patch(`/post/${data}/like`)\n}\n\nfunction* likePost(action) {\n    try {\n        const result = yield call(likePostAPI, action.data);\n\n        yield put({\n            type: LIKE_POST_SUCCESS,\n            data: result.data,\n        });\n\n    }\n    catch (err) {\n        yield put({\n            type: LIKE_POST_FAILURE,\n            data: err.response.data,\n        })\n    }\n};\n\n\n\nfunction unlikePostAPI(data) {\n    return axios.delete(`/post/${data}/like`)\n}\n\nfunction* unlikePost(action) {\n    try {\n        const result = yield call(unlikePostAPI, action.data);\n\n        yield put({\n            type: UNLIKE_POST_SUCCESS,\n            data: result.data,\n        });\n\n    }\n    catch (err) {\n        yield put({\n            type: UNLIKE_POST_FAILURE,\n            data: err.response.data,\n        })\n    }\n};\n\n\n\nfunction addPostAPI(data) {\n    return axios.post('/post', { content: data })\n}\n\nfunction* addPost(action) {\n    try {\n        const result = yield call(addPostAPI, action.data);\n\n        yield put({\n            type: ADD_POST_SUCCESS,\n            data: result.data,\n        });\n        yield put({\n            type: ADD_POST_TO_ME,\n            data: result.data.id,\n        })\n    }\n    catch (err) {\n        yield put({\n            type: ADD_POST_FAILURE,\n            data: err.response.data,\n        })\n    }\n};\n\n\nfunction loadPostsAPI() {\n    return axios.get(`/post`);\n}\n\nfunction* loadPosts(action) {\n    try {\n        const result = yield call(loadPostsAPI, action.data);\n        yield put({\n            type: LOAD_POSTS_SUCCESS,\n            data: result.data,\n        });\n    } catch (err) {\n        console.error(err);\n        yield put({\n            type: LOAD_POSTS_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\n\n\n\nfunction removePostAPI(data) {\n    return axios.delete(`/post/${data}`, data)\n}\n\nfunction* removePost(action) {\n    try {\n        const result = yield call(removePostAPI, action.data)\n\n        yield put({\n            type: REMOVE_POST_SUCCESS,\n            data: result.data,\n        });\n        yield put({\n            type: REMOVE_POST_OF_ME,\n            data: action.data,\n        })\n    }\n    catch (err) {\n        yield put({\n            type: REMOVE_POST_FAILURE,\n            data: err.response.data,\n        })\n    }\n};\n\n\nfunction addCommentAPI(data) {\n    return axios.post(`/post/${data.postId}/comment`, data); // POST /post/1/comment\n}\n\nfunction* addComment(action) {\n    try {\n        const result = yield call(addCommentAPI, action.data);\n        yield put({\n            type: ADD_COMMENT_SUCCESS,\n            data: result.data,\n        });\n    } catch (err) {\n        console.error(err);\n        yield put({\n            type: ADD_COMMENT_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\n\n\nfunction* watchUploadImages() {\n    yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\n\nfunction* watchLikePost() {\n    yield throttle(2000, LIKE_POST_REQUEST, likePost);\n};\n\nfunction* watchUnlikePost() {\n    yield throttle(2000, UNLIKE_POST_REQUEST, unlikePost);\n};\n\n\nfunction* watchLoadPost() {\n    yield throttle(2000, LOAD_POSTS_REQUEST, loadPosts);\n};\n\nfunction* watchAddPost() {\n    yield takeLatest(ADD_POST_REQUEST, addPost);\n};\n\nfunction* watchRemovePost() {\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\n};\n\n\nfunction* watchAddComment() {\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\n\n\n\n\n\nexport default function* postSaga() {\n    yield all([\n        fork(watchUploadImages),\n\n        fork(watchLikePost),\n        fork(watchUnlikePost),\n        fork(watchAddPost),\n        fork(watchRemovePost),\n        fork(watchAddComment),\n        fork(watchLoadPost),\n    ])\n} "],"mappings":"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"},"metadata":{},"sourceType":"module"}