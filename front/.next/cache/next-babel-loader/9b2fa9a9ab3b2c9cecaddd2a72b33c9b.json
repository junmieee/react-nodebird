{"ast":null,"code":"import { all, delay, put, takeLatest, fork, throttle, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\nimport shorId from 'shortid';\nimport { generateDummyPost } from '../reducers/post';\nfunction addPostAPI(data) {\n  return axios.post('/post', {\n    content: data\n  });\n}\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n;\nfunction loadPostsAPI(data) {\n  return axios.get('/posts', data);\n}\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.data);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n;\nfunction removePostAPI(data) {\n  return axios.delete('/api/post', data);\n}\nfunction* removePost(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n;\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchLoadPost() {\n  yield throttle(2000, LOAD_POSTS_REQUEST, loadPosts);\n}\n;\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n;\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n;\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment), fork(watchLoadPost)]);\n}","map":{"version":3,"names":["all","delay","put","takeLatest","fork","throttle","call","axios","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","shorId","generateDummyPost","addPostAPI","data","post","content","addPost","action","result","type","id","err","response","loadPostsAPI","get","loadPosts","removePostAPI","delete","removePost","addCommentAPI","postId","addComment","watchLoadPost","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"sources":["/Users/junmishin/Desktop/projects/nobird/front/sagas/post.js"],"sourcesContent":["import { all, delay, put, takeLatest, fork, throttle, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport {\n    ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST,\n    ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE\n\n} from '../reducers/post'\n\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\nimport shorId from 'shortid';\nimport { generateDummyPost } from '../reducers/post'\n\nfunction addPostAPI(data) {\n    return axios.post('/post', { content: data })\n}\n\nfunction* addPost(action) {\n    try {\n        const result = yield call(addPostAPI, action.data);\n\n        yield put({\n            type: ADD_POST_SUCCESS,\n            data: result.data,\n        });\n        yield put({\n            type: ADD_POST_TO_ME,\n            data: result.data.id,\n        })\n    }\n    catch (err) {\n        yield put({\n            type: ADD_POST_FAILURE,\n            data: err.response.data,\n        })\n    }\n};\n\n\n\nfunction loadPostsAPI(data) {\n    return axios.get('/posts', data)\n}\n\nfunction* loadPosts(action) {\n    try {\n        const result = yield call(loadPostsAPI, action.data);\n        yield put({\n            type: LOAD_POSTS_SUCCESS,\n            data: result.data,\n        });\n\n    }\n    catch (err) {\n        yield put({\n            type: LOAD_POSTS_FAILURE,\n            data: err.response.data,\n        })\n    }\n};\n\n\n\nfunction removePostAPI(data) {\n    return axios.delete('/api/post', data)\n}\n\nfunction* removePost(action) {\n    try {\n        yield delay(1000);\n        yield put({\n            type: REMOVE_POST_SUCCESS,\n            data: action.data,\n        });\n        yield put({\n            type: REMOVE_POST_OF_ME,\n            data: action.data,\n        })\n    }\n    catch (err) {\n        yield put({\n            type: REMOVE_POST_FAILURE,\n            data: err.response.data,\n        })\n    }\n};\n\n\nfunction addCommentAPI(data) {\n    return axios.post(`/post/${data.postId}/comment`, data)\n}\n\nfunction* addComment(action) {\n    try {\n        const result = yield call(addCommentAPI, action.data);\n        yield put({\n            type: ADD_COMMENT_SUCCESS,\n            data: result.data,\n        });\n    }\n    catch (err) {\n        yield put({\n            type: ADD_COMMENT_FAILURE,\n            data: err.response.data,\n        })\n    }\n}\n\nfunction* watchLoadPost() {\n    yield throttle(2000, LOAD_POSTS_REQUEST, loadPosts);\n};\n\nfunction* watchAddPost() {\n    yield takeLatest(ADD_POST_REQUEST, addPost);\n};\n\nfunction* watchRemovePost() {\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\n};\n\n\nfunction* watchAddComment() {\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\n\n\n\n\n\nexport default function* postSaga() {\n    yield all([\n        fork(watchAddPost),\n        fork(watchRemovePost),\n        fork(watchAddComment),\n        fork(watchLoadPost)\n    ])\n} "],"mappings":"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"},"metadata":{},"sourceType":"module"}