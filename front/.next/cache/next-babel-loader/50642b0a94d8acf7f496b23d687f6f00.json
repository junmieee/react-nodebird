{"ast":null,"code":"import produce from 'immer';\nimport faker from 'faker@5';\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: 'Chloe'\n    },\n    content: '첫 번째 게시글 #헤시태그 #익스프레스',\n    Images: [{\n      id: shortId.generate(),\n      src: 'https://i.pinimg.com/474x/3e/29/14/3e29149409aafb78f61ff6f3ff0c9f98.jpg'\n    }, {\n      id: shortId.generate(),\n      src: 'https://i.pinimg.com/474x/ea/05/f5/ea05f54b3824fbc4ba2345e873190b33.jpg'\n    }, {\n      id: shortId.generate(),\n      src: 'https://i.pinimg.com/474x/ac/f8/5a/acf85a2ae3a939ba695b6af517302155.jpg'\n    }],\n    Comments: [{\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: 'nero'\n      },\n      content: '우아아'\n    }, {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: 'hero'\n      },\n      content: '신기하다'\n    }]\n  }],\n  //업로드 하는 이미지 경로들\n  imagePaths: [],\n  //포스트 추가가 완료되면 true \n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\ninitialState.mainPosts.concat(Array(20).fill().map(() => ({\n  id: shortId.generate(),\n  User: {\n    id: shortId.generate(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.image()\n  }],\n  Comments: [{\n    User: {\n      id: shortId.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence()\n  }]\n})));\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\n//액션크리에이터\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nimport shortId from 'shortid';\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\nexport const dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: 'Chloe'\n  },\n  Images: [{\n    src: ''\n  }],\n  Comments: []\n});\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: 'Chloe'\n  }\n});\nconst reducer = (state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.mainPosts.unshift(dummyPost(action.data));\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        break;\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(y => y.id !== action.data);\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      case ADD_COMMENT_REQUEST:\n        draft.removeCommentLoading = true;\n        draft.removeCommentDone = false;\n        draft.removeCommentError = null;\n      case ADD_COMMENT_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.postId);\n          post.Comments.unshift(dummyComment(action.data.content));\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          // const postIndex = state.mainPosts.findIndex((y) => y.id === action.data.postId);\n          // const post = { ...state.mainPosts[postIndex] };\n          // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n          // const mainPosts = [...state.mainPosts];\n          // mainPosts[postIndex] = post;\n\n          // return {\n          //     ...state,\n          //     mainPosts,\n          //     addCommentLoading: false,\n          //     addCommentDone: true,\n          // };\n          break;\n        }\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n      default:\n        break;\n    }\n  });\n};\nexport default reducer;","map":{"version":3,"names":["produce","faker","initialState","mainPosts","id","User","nickname","content","Images","shortId","generate","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","concat","Array","fill","map","name","findName","lorem","paragraph","image","sentence","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","unshift","error","filter","y","removeCommentLoading","removeCommentDone","removeCommentError","post","find","v","postId"],"sources":["/Users/junmishin/Desktop/projects/nobird/front/reducers/post.js"],"sourcesContent":["import produce from 'immer';\nimport faker from 'faker@5';\n\n\n\nexport const initialState = {\n    mainPosts: [{\n        id: 1,\n        User: {\n            id: 1,\n            nickname: 'Chloe',\n        },\n        content: '첫 번째 게시글 #헤시태그 #익스프레스',\n        Images: [{\n            id: shortId.generate(),\n\n            src: 'https://i.pinimg.com/474x/3e/29/14/3e29149409aafb78f61ff6f3ff0c9f98.jpg'\n\n        }, {\n            id: shortId.generate(),\n\n            src: 'https://i.pinimg.com/474x/ea/05/f5/ea05f54b3824fbc4ba2345e873190b33.jpg'\n\n        }, {\n            id: shortId.generate(),\n\n            src: 'https://i.pinimg.com/474x/ac/f8/5a/acf85a2ae3a939ba695b6af517302155.jpg'\n\n        }],\n        Comments: [\n            {\n                id: shortId.generate(),\n                User: {\n                    id: shortId.generate(),\n\n                    nickname: 'nero',\n                },\n                content: '우아아'\n            },\n            {\n                id: shortId.generate(),\n                User: {\n                    id: shortId.generate(),\n                    nickname: 'hero',\n\n                },\n                content: '신기하다'\n\n            }\n        ]\n    }],\n    //업로드 하는 이미지 경로들\n    imagePaths: [],\n    //포스트 추가가 완료되면 true \n    addPostLoading: false,\n    addPostDone: false,\n    addPostError: null,\n    removePostLoading: false,\n    removePostDone: false,\n    removePostError: null,\n    addCommentLoading: false,\n    addCommentDone: false,\n    addCommentError: null,\n};\n\n\ninitialState.mainPosts.concat(\n    Array(20).fill().map(() => ({\n        id: shortId.generate(),\n        User: {\n            id: shortId.generate(),\n            nickname: faker.name.findName()\n        },\n        content: faker.lorem.paragraph(),\n        Images: [{\n            src: faker.image.image(),\n        }],\n        Comments: [{\n            User: {\n                id: shortId.generate(),\n                nickname: faker.name.findName()\n            },\n            content: faker.lorem.sentence(),\n        }],\n    })),\n)\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\n\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\n\n//액션크리에이터\nexport const addPost = (data) => ({\n    type: ADD_POST_REQUEST,\n    data\n});\nimport shortId from 'shortid'\n\n\nexport const addComment = (data) => ({\n    type: ADD_COMMENT_REQUEST,\n    data,\n});\n\nexport const dummyPost = (data) => ({\n    id: data.id,\n    content: data.content,\n    User: {\n        id: 1,\n        nickname: 'Chloe'\n    },\n    Images: [{\n        src: ''\n    }],\n    Comments: [],\n\n});\n\n\nconst dummyComment = (data) => ({\n    id: shortId.generate(),\n    content: data,\n    User: {\n        id: 1,\n        nickname: 'Chloe',\n    }\n\n\n});\n\n\nconst reducer = (state = initialState, action) => {\n    return produce(state, (draft) => {\n        switch (action.type) {\n            case ADD_POST_REQUEST:\n                draft.addPostLoading = true;\n                draft.addPostDone = false;\n                draft.addPostError = null;\n                break;\n            case ADD_POST_SUCCESS:\n                draft.mainPosts.unshift(dummyPost(action.data))\n                draft.addPostLoading = false;\n                draft.addPostDone = true;\n                break;\n            case ADD_POST_FAILURE:\n                draft.addPostLoading = false;\n                draft.addPostError = action.error;\n                break;\n            case REMOVE_POST_REQUEST:\n                draft.removePostLoading = true;\n                draft.removePostDone = false;\n                draft.removePostError = null;\n                break;\n            case REMOVE_POST_SUCCESS:\n\n                draft.mainPosts = draft.mainPosts.filter((y) => y.id !== action.data);\n                draft.removePostLoading = false;\n                draft.removePostDone = true;\n                break;\n            case REMOVE_POST_FAILURE:\n                draft.removePostLoading = false;\n                draft.removePostError = action.error;\n                break;\n            case ADD_COMMENT_REQUEST:\n                draft.removeCommentLoading = true;\n                draft.removeCommentDone = false;\n                draft.removeCommentError = null;\n            case ADD_COMMENT_SUCCESS:\n                {\n                    const post = draft.mainPosts.find((v) => v.id === action.data.postId);\n                    post.Comments.unshift(dummyComment(action.data.content));\n                    draft.addCommentLoading = false;\n                    draft.addCommentDone = true;\n                    // const postIndex = state.mainPosts.findIndex((y) => y.id === action.data.postId);\n                    // const post = { ...state.mainPosts[postIndex] };\n                    // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n                    // const mainPosts = [...state.mainPosts];\n                    // mainPosts[postIndex] = post;\n\n\n\n                    // return {\n                    //     ...state,\n                    //     mainPosts,\n                    //     addCommentLoading: false,\n                    //     addCommentDone: true,\n                    // };\n                    break;\n                }\n            case ADD_COMMENT_FAILURE:\n\n                draft.addCommentLoading = false;\n                draft.addCommentError = action.error;\n                break;\n            default:\n                break;\n        }\n\n    });\n\n}\n\n\n\nexport default reducer"],"mappings":"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"},"metadata":{},"sourceType":"module"}