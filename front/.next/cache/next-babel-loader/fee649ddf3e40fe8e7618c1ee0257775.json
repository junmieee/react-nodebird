{"ast":null,"code":"import produce from 'immer';\n// import faker from 'faker';\n\nexport var initialState = {\n  mainPosts: [],\n  //업로드 하는 이미지 경로들\n  imagePaths: [],\n  //포스트 추가가 완료되면 true \n  hasMorePosts: true,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null\n};\n\n// export const generateDummyPost = (number) => Array(number).fill().map(() => ({\n//     id: shortId.generate(),\n//     User: {\n//         id: shortId.generate(),\n//         nickname: faker.name.findName()\n//     },\n//     content: faker.lorem.paragraph(),\n//     Images: [{\n//         src: faker.image.image(),\n\n//     }],\n//     Comments: [{\n//         User: {\n//             id: shortId.generate(),\n//             nickname: faker.name.findName()\n//         },\n//         content: faker.lorem.sentence(),\n//     }],\n// }));\n\nexport var UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport var UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport var UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\nexport var LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport var LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport var LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport var UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport var UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport var UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport var LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\nexport var LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\nexport var LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\nexport var LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport var LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport var LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\n//액션크리에이터\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nimport shortId from 'shortid';\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\n\n// export const dummyPost = (data) => ({\n//     id: data.id,\n//     content: data.content,\n//     User: {\n//         id: 1,\n//         nickname: 'Chloe'\n//     },\n//     Images: [{\n//         src: ''\n//     }],\n//     Comments: [],\n\n// });\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case UPLOAD_IMAGES_REQUEST:\n        draft.uploadImagesLoading = true;\n        draft.uploadImagesDone = false;\n        draft.uploadImagesError = null;\n        break;\n      case UPLOAD_IMAGES_SUCCESS:\n        {\n          draft.imagePaths = action.data;\n          draft.uploadImagesLoading = false;\n          draft.uploadImagesDone = true;\n          break;\n        }\n      case UPLOAD_IMAGES_FAILURE:\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesError = action.error;\n        break;\n      case LIKE_POST_REQUEST:\n        draft.likePostLoading = true;\n        draft.likePostDone = false;\n        draft.likePostError = null;\n        break;\n      case LIKE_POST_SUCCESS:\n        {\n          var post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n          post.Likers.push({\n            id: action.data.UserId\n          });\n          draft.likePostLoading = false;\n          draft.likePostDone = true;\n          break;\n        }\n      case LIKE_POST_FAILURE:\n        draft.likePostLoading = false;\n        draft.likePostError = action.error;\n        break;\n      case UNLIKE_POST_REQUEST:\n        draft.unlikePostLoading = true;\n        draft.unlikePostDone = false;\n        draft.unlikePostError = null;\n        break;\n      case UNLIKE_POST_SUCCESS:\n        {\n          var _post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n          _post.Likers = _post.Likers.filter(function (v) {\n            return v.id !== action.data.UserId;\n          });\n          draft.unlikePostLoading = false;\n          draft.unlikePostDone = true;\n          break;\n        }\n      case UNLIKE_POST_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.unlikePostError = action.error;\n        break;\n      case LOAD_POST_REQUEST:\n        draft.loadPostLoading = true;\n        draft.loadPostDone = false;\n        draft.loadPostError = null;\n        break;\n      case LOAD_POST_SUCCESS:\n        draft.loadPostLoading = false;\n        draft.loadPostDone = true;\n        draft.singlePost = action.data;\n        break;\n      case LOAD_POST_FAILURE:\n        draft.loadPostLoading = false;\n        draft.loadPostError = action.error;\n        break;\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = draft.mainPosts.concat(action.data);\n        draft.hasMorePosts = action.data.length === 10;\n        break;\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.mainPosts.unshift(action.data);\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        break;\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(function (y) {\n          return y.id !== action.data.PostId;\n        });\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      case ADD_COMMENT_REQUEST:\n        draft.removeCommentLoading = true;\n        draft.removeCommentDone = false;\n        draft.removeCommentError = null;\n        break;\n      case ADD_COMMENT_SUCCESS:\n        {\n          var _post2 = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n          _post2.Comments.unshift(action.data);\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break;\n          // const postIndex = state.mainPosts.findIndex((y) => y.id === action.data.postId);\n          // const post = { ...state.mainPosts[postIndex] };\n          // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n          // const mainPosts = [...state.mainPosts];\n          // mainPosts[postIndex] = post;\n\n          // return {\n          //     ...state,\n          //     mainPosts,\n          //     addCommentLoading: false,\n          //     addCommentDone: true,\n          // };\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n      default:\n        break;\n    }\n  });\n};\nexport default reducer;","map":{"version":3,"names":["produce","initialState","mainPosts","imagePaths","hasMorePosts","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","loadPostLoading","loadPostDone","loadPostError","uploadImagesLoading","uploadImagesDone","uploadImagesError","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","shortId","addComment","reducer","state","action","draft","error","post","find","v","id","PostId","Likers","push","UserId","filter","singlePost","concat","length","unshift","y","removeCommentLoading","removeCommentDone","removeCommentError","Comments"],"sources":["/Users/junmishin/Desktop/projects/nobird/front/reducers/post.js"],"sourcesContent":["import produce from 'immer';\n// import faker from 'faker';\n\n\n\nexport const initialState = {\n    mainPosts: [],\n    //업로드 하는 이미지 경로들\n    imagePaths: [],\n    //포스트 추가가 완료되면 true \n    hasMorePosts: true,\n\n\n    likePostLoading: false,\n    likePostDone: false,\n    likePostError: null,\n    unlikePostLoading: false,\n    unlikePostDone: false,\n    unlikePostError: null,\n\n    loadPostsLoading: false,\n    loadPostsDone: false,\n    loadPostsError: null,\n    addPostLoading: false,\n    addPostDone: false,\n    addPostError: null,\n    removePostLoading: false,\n    removePostDone: false,\n    removePostError: null,\n    addCommentLoading: false,\n    addCommentDone: false,\n    addCommentError: null,\n    loadPostLoading: false,\n    loadPostDone: false,\n    loadPostError: null,\n\n    uploadImagesLoading: false,\n    uploadImagesDone: false,\n    uploadImagesError: null,\n};\n\n\n// export const generateDummyPost = (number) => Array(number).fill().map(() => ({\n//     id: shortId.generate(),\n//     User: {\n//         id: shortId.generate(),\n//         nickname: faker.name.findName()\n//     },\n//     content: faker.lorem.paragraph(),\n//     Images: [{\n//         src: faker.image.image(),\n\n//     }],\n//     Comments: [{\n//         User: {\n//             id: shortId.generate(),\n//             nickname: faker.name.findName()\n//         },\n//         content: faker.lorem.sentence(),\n//     }],\n// }));\n\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\n\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\n\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\n\n\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\n\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\n\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\n\n//액션크리에이터\nexport const addPost = (data) => ({\n    type: ADD_POST_REQUEST,\n    data\n});\nimport shortId from 'shortid'\n\n\nexport const addComment = (data) => ({\n    type: ADD_COMMENT_REQUEST,\n    data,\n});\n\n// export const dummyPost = (data) => ({\n//     id: data.id,\n//     content: data.content,\n//     User: {\n//         id: 1,\n//         nickname: 'Chloe'\n//     },\n//     Images: [{\n//         src: ''\n//     }],\n//     Comments: [],\n\n// });\n\n\n\n\n\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\n\n    switch (action.type) {\n\n        case UPLOAD_IMAGES_REQUEST:\n            draft.uploadImagesLoading = true;\n            draft.uploadImagesDone = false;\n            draft.uploadImagesError = null;\n            break;\n        case UPLOAD_IMAGES_SUCCESS: {\n            draft.imagePaths = action.data;\n            draft.uploadImagesLoading = false;\n            draft.uploadImagesDone = true;\n            break;\n        }\n        case UPLOAD_IMAGES_FAILURE:\n            draft.uploadImagesLoading = false;\n            draft.uploadImagesError = action.error;\n            break;\n\n\n        case LIKE_POST_REQUEST:\n            draft.likePostLoading = true;\n            draft.likePostDone = false;\n            draft.likePostError = null;\n            break;\n        case LIKE_POST_SUCCESS: {\n            const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n            post.Likers.push({ id: action.data.UserId })\n\n            draft.likePostLoading = false;\n            draft.likePostDone = true;\n            break;\n        }\n        case LIKE_POST_FAILURE:\n            draft.likePostLoading = false;\n            draft.likePostError = action.error;\n            break;\n\n\n        case UNLIKE_POST_REQUEST:\n            draft.unlikePostLoading = true;\n            draft.unlikePostDone = false;\n            draft.unlikePostError = null;\n            break;\n        case UNLIKE_POST_SUCCESS: {\n            const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n            post.Likers = post.Likers.filter((v) => v.id !== action.data.UserId)\n\n            draft.unlikePostLoading = false;\n            draft.unlikePostDone = true;\n            break;\n        }\n        case UNLIKE_POST_FAILURE:\n            draft.loadPostsLoading = false;\n            draft.unlikePostError = action.error;\n            break;\n\n\n        case LOAD_POST_REQUEST:\n            draft.loadPostLoading = true;\n            draft.loadPostDone = false;\n            draft.loadPostError = null;\n            break;\n        case LOAD_POST_SUCCESS:\n            draft.loadPostLoading = false;\n            draft.loadPostDone = true;\n            draft.singlePost = action.data;\n            break;\n        case LOAD_POST_FAILURE:\n            draft.loadPostLoading = false;\n            draft.loadPostError = action.error;\n            break;\n\n\n\n\n        case LOAD_POSTS_REQUEST:\n            draft.loadPostsLoading = true;\n            draft.loadPostsDone = false;\n            draft.loadPostsError = null;\n            break;\n        case LOAD_POSTS_SUCCESS:\n            draft.loadPostsLoading = false;\n            draft.loadPostsDone = true;\n            draft.mainPosts = draft.mainPosts.concat(action.data);\n            draft.hasMorePosts = action.data.length === 10;\n            break;\n        case LOAD_POSTS_FAILURE:\n            draft.loadPostsLoading = false;\n            draft.loadPostsError = action.error;\n            break;\n\n        case ADD_POST_REQUEST:\n            draft.addPostLoading = true;\n            draft.addPostDone = false;\n            draft.addPostError = null;\n            break;\n        case ADD_POST_SUCCESS:\n            draft.mainPosts.unshift(action.data);\n            draft.addPostLoading = false;\n            draft.addPostDone = true;\n            break;\n        case ADD_POST_FAILURE:\n            draft.addPostLoading = false;\n            draft.addPostError = action.error;\n            break;\n        case REMOVE_POST_REQUEST:\n            draft.removePostLoading = true;\n            draft.removePostDone = false;\n            draft.removePostError = null;\n            break;\n        case REMOVE_POST_SUCCESS:\n\n            draft.mainPosts = draft.mainPosts.filter((y) => y.id !== action.data.PostId);\n            draft.removePostLoading = false;\n            draft.removePostDone = true;\n            break;\n        case REMOVE_POST_FAILURE:\n            draft.removePostLoading = false;\n            draft.removePostError = action.error;\n            break;\n\n\n        case ADD_COMMENT_REQUEST:\n            draft.removeCommentLoading = true;\n            draft.removeCommentDone = false;\n            draft.removeCommentError = null;\n            break;\n        case ADD_COMMENT_SUCCESS: {\n            const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n            post.Comments.unshift(action.data);\n            draft.addCommentLoading = false;\n            draft.addCommentDone = true;\n            break;\n            // const postIndex = state.mainPosts.findIndex((y) => y.id === action.data.postId);\n            // const post = { ...state.mainPosts[postIndex] };\n            // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n            // const mainPosts = [...state.mainPosts];\n            // mainPosts[postIndex] = post;\n\n\n\n            // return {\n            //     ...state,\n            //     mainPosts,\n            //     addCommentLoading: false,\n            //     addCommentDone: true,\n            // };\n\n        }\n        case ADD_COMMENT_FAILURE:\n\n            draft.addCommentLoading = false;\n            draft.addCommentError = action.error;\n            break;\n        default:\n            break;\n    }\n\n});\n\n\n\n\n\nexport default reducer"],"mappings":"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"},"metadata":{},"sourceType":"module"}