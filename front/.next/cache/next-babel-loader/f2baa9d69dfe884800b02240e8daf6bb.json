{"ast":null,"code":"import produce from 'immer';\n// import faker from 'faker';\n\nexport var initialState = {\n  // mainPosts: [{\n  //     id: 1,\n  //     User: {\n  //         id: 1,\n  //         nickname: 'Chloe',\n  //     },\n  //     content: '첫 번째 게시글 #헤시태그 #익스프레스',\n  //     Images: [{\n  //         id: shortId.generate(),\n\n  //         src: 'https://i.pinimg.com/474x/3e/29/14/3e29149409aafb78f61ff6f3ff0c9f98.jpg'\n\n  //     }, {\n  //         id: shortId.generate(),\n\n  //         src: 'https://i.pinimg.com/474x/ea/05/f5/ea05f54b3824fbc4ba2345e873190b33.jpg'\n\n  //     }, {\n  //         id: shortId.generate(),\n\n  //         src: 'https://i.pinimg.com/474x/ac/f8/5a/acf85a2ae3a939ba695b6af517302155.jpg'\n\n  //     }],\n  //     Comments: [\n  //         {\n  //             id: shortId.generate(),\n  //             User: {\n  //                 id: shortId.generate(),\n\n  //                 nickname: 'nero',\n  //             },\n  //             content: '우아아'\n  //         },\n  //         {\n  //             id: shortId.generate(),\n  //             User: {\n  //                 id: shortId.generate(),\n  //                 nickname: 'hero',\n\n  //             },\n  //             content: '신기하다'\n\n  //         }\n  //     ]\n  // }],\n  //업로드 하는 이미지 경로들\n  imagePaths: [],\n  //포스트 추가가 완료되면 true \n  hasMorePosts: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\n\n// export const generateDummyPost = (number) => Array(number).fill().map(() => ({\n//     id: shortId.generate(),\n//     User: {\n//         id: shortId.generate(),\n//         nickname: faker.name.findName()\n//     },\n//     content: faker.lorem.paragraph(),\n//     Images: [{\n//         src: faker.image.image(),\n\n//     }],\n//     Comments: [{\n//         User: {\n//             id: shortId.generate(),\n//             nickname: faker.name.findName()\n//         },\n//         content: faker.lorem.sentence(),\n//     }],\n// }));\n\nexport var LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport var LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport var LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\n//액션크리에이터\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nimport shortId from 'shortid';\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\n\n// export const dummyPost = (data) => ({\n//     id: data.id,\n//     content: data.content,\n//     User: {\n//         id: 1,\n//         nickname: 'Chloe'\n//     },\n//     Images: [{\n//         src: ''\n//     }],\n//     Comments: [],\n\n// });\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n      case LOAD_POSTS_SUCCESS:\n        draft.mainPosts = action.data.concat(draft.mainPosts);\n        draft.hasMorePosts = draft.mainPosts.length < 50;\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        break;\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.mainPosts.unshift(action.data);\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        break;\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(function (y) {\n          return y.id !== action.data;\n        });\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      case ADD_COMMENT_REQUEST:\n        draft.removeCommentLoading = true;\n        draft.removeCommentDone = false;\n        draft.removeCommentError = null;\n      case ADD_COMMENT_SUCCESS:\n        {\n          var post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n          post.Comments.unshift(action.data);\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break;\n          // const postIndex = state.mainPosts.findIndex((y) => y.id === action.data.postId);\n          // const post = { ...state.mainPosts[postIndex] };\n          // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n          // const mainPosts = [...state.mainPosts];\n          // mainPosts[postIndex] = post;\n\n          // return {\n          //     ...state,\n          //     mainPosts,\n          //     addCommentLoading: false,\n          //     addCommentDone: true,\n          // };\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n      default:\n        break;\n    }\n  });\n};\nexport default reducer;","map":{"version":3,"names":["produce","initialState","imagePaths","hasMorePosts","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","shortId","addComment","reducer","state","action","draft","mainPosts","concat","length","error","unshift","filter","y","id","removeCommentLoading","removeCommentDone","removeCommentError","post","find","v","PostId","Comments"],"sources":["/Users/junmishin/Desktop/projects/nobird/front/reducers/post.js"],"sourcesContent":["import produce from 'immer';\n// import faker from 'faker';\n\n\n\nexport const initialState = {\n    // mainPosts: [{\n    //     id: 1,\n    //     User: {\n    //         id: 1,\n    //         nickname: 'Chloe',\n    //     },\n    //     content: '첫 번째 게시글 #헤시태그 #익스프레스',\n    //     Images: [{\n    //         id: shortId.generate(),\n\n    //         src: 'https://i.pinimg.com/474x/3e/29/14/3e29149409aafb78f61ff6f3ff0c9f98.jpg'\n\n    //     }, {\n    //         id: shortId.generate(),\n\n    //         src: 'https://i.pinimg.com/474x/ea/05/f5/ea05f54b3824fbc4ba2345e873190b33.jpg'\n\n    //     }, {\n    //         id: shortId.generate(),\n\n    //         src: 'https://i.pinimg.com/474x/ac/f8/5a/acf85a2ae3a939ba695b6af517302155.jpg'\n\n    //     }],\n    //     Comments: [\n    //         {\n    //             id: shortId.generate(),\n    //             User: {\n    //                 id: shortId.generate(),\n\n    //                 nickname: 'nero',\n    //             },\n    //             content: '우아아'\n    //         },\n    //         {\n    //             id: shortId.generate(),\n    //             User: {\n    //                 id: shortId.generate(),\n    //                 nickname: 'hero',\n\n    //             },\n    //             content: '신기하다'\n\n    //         }\n    //     ]\n    // }],\n    //업로드 하는 이미지 경로들\n    imagePaths: [],\n    //포스트 추가가 완료되면 true \n    hasMorePosts: true,\n    loadPostsLoading: false,\n    loadPostsDone: false,\n    loadPostsError: null,\n    addPostLoading: false,\n    addPostDone: false,\n    addPostError: null,\n    removePostLoading: false,\n    removePostDone: false,\n    removePostError: null,\n    addCommentLoading: false,\n    addCommentDone: false,\n    addCommentError: null,\n};\n\n\n// export const generateDummyPost = (number) => Array(number).fill().map(() => ({\n//     id: shortId.generate(),\n//     User: {\n//         id: shortId.generate(),\n//         nickname: faker.name.findName()\n//     },\n//     content: faker.lorem.paragraph(),\n//     Images: [{\n//         src: faker.image.image(),\n\n//     }],\n//     Comments: [{\n//         User: {\n//             id: shortId.generate(),\n//             nickname: faker.name.findName()\n//         },\n//         content: faker.lorem.sentence(),\n//     }],\n// }));\n\n\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\n\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\n\n//액션크리에이터\nexport const addPost = (data) => ({\n    type: ADD_POST_REQUEST,\n    data\n});\nimport shortId from 'shortid'\n\n\nexport const addComment = (data) => ({\n    type: ADD_COMMENT_REQUEST,\n    data,\n});\n\n// export const dummyPost = (data) => ({\n//     id: data.id,\n//     content: data.content,\n//     User: {\n//         id: 1,\n//         nickname: 'Chloe'\n//     },\n//     Images: [{\n//         src: ''\n//     }],\n//     Comments: [],\n\n// });\n\n\n\n\n\nconst reducer = (state = initialState, action) => {\n    return produce(state, (draft) => {\n        switch (action.type) {\n            case LOAD_POSTS_REQUEST:\n                draft.loadPostsLoading = true;\n                draft.loadPostsDone = false;\n                draft.loadPostsError = null;\n                break;\n            case LOAD_POSTS_SUCCESS:\n                draft.mainPosts = action.data.concat(draft.mainPosts);\n                draft.hasMorePosts = draft.mainPosts.length < 50;\n                draft.loadPostsLoading = false;\n                draft.loadPostsDone = true;\n                break;\n            case LOAD_POSTS_FAILURE:\n                draft.loadPostsLoading = false;\n                draft.loadPostsError = action.error;\n                break;\n\n            case ADD_POST_REQUEST:\n                draft.addPostLoading = true;\n                draft.addPostDone = false;\n                draft.addPostError = null;\n                break;\n            case ADD_POST_SUCCESS:\n                draft.mainPosts.unshift(action.data);\n                draft.addPostLoading = false;\n                draft.addPostDone = true;\n                break;\n            case ADD_POST_FAILURE:\n                draft.addPostLoading = false;\n                draft.addPostError = action.error;\n                break;\n            case REMOVE_POST_REQUEST:\n                draft.removePostLoading = true;\n                draft.removePostDone = false;\n                draft.removePostError = null;\n                break;\n            case REMOVE_POST_SUCCESS:\n\n                draft.mainPosts = draft.mainPosts.filter((y) => y.id !== action.data);\n                draft.removePostLoading = false;\n                draft.removePostDone = true;\n                break;\n            case REMOVE_POST_FAILURE:\n                draft.removePostLoading = false;\n                draft.removePostError = action.error;\n                break;\n            case ADD_COMMENT_REQUEST:\n                draft.removeCommentLoading = true;\n                draft.removeCommentDone = false;\n                draft.removeCommentError = null;\n            case ADD_COMMENT_SUCCESS: {\n                const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n                post.Comments.unshift(action.data);\n                draft.addCommentLoading = false;\n                draft.addCommentDone = true;\n                break;\n                // const postIndex = state.mainPosts.findIndex((y) => y.id === action.data.postId);\n                // const post = { ...state.mainPosts[postIndex] };\n                // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n                // const mainPosts = [...state.mainPosts];\n                // mainPosts[postIndex] = post;\n\n\n\n                // return {\n                //     ...state,\n                //     mainPosts,\n                //     addCommentLoading: false,\n                //     addCommentDone: true,\n                // };\n\n            }\n            case ADD_COMMENT_FAILURE:\n\n                draft.addCommentLoading = false;\n                draft.addCommentError = action.error;\n                break;\n            default:\n                break;\n        }\n\n    });\n\n}\n\n\n\nexport default reducer"],"mappings":"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"},"metadata":{},"sourceType":"module"}