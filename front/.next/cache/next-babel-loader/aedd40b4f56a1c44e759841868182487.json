{"ast":null,"code":"import produce from 'immer';\n// import faker from 'faker';\n\nexport var initialState = {\n  mainPosts: [],\n  //업로드 하는 이미지 경로들\n  imagePaths: [],\n  //포스트 추가가 완료되면 true \n  hasMorePosts: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\n\n// export const generateDummyPost = (number) => Array(number).fill().map(() => ({\n//     id: shortId.generate(),\n//     User: {\n//         id: shortId.generate(),\n//         nickname: faker.name.findName()\n//     },\n//     content: faker.lorem.paragraph(),\n//     Images: [{\n//         src: faker.image.image(),\n\n//     }],\n//     Comments: [{\n//         User: {\n//             id: shortId.generate(),\n//             nickname: faker.name.findName()\n//         },\n//         content: faker.lorem.sentence(),\n//     }],\n// }));\n\nexport var LIKE_POST_REQUEST = 'LOAD_POSTS_REQUEST';\nexport var LIKE_POST_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport var LIKE_POST_FAILURE = 'LOAD_POSTS_FAILURE';\nexport var LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport var LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport var LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\n//액션크리에이터\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nimport shortId from 'shortid';\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\n\n// export const dummyPost = (data) => ({\n//     id: data.id,\n//     content: data.content,\n//     User: {\n//         id: 1,\n//         nickname: 'Chloe'\n//     },\n//     Images: [{\n//         src: ''\n//     }],\n//     Comments: [],\n\n// });\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n      case LOAD_POSTS_SUCCESS:\n        draft.mainPosts = draft.mainPosts.concat(action.data);\n        draft.hasMorePosts = draft.mainPosts.length < 50;\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        break;\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.mainPosts.unshift(action.data);\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        break;\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(function (y) {\n          return y.id !== action.data;\n        });\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      case ADD_COMMENT_REQUEST:\n        draft.removeCommentLoading = true;\n        draft.removeCommentDone = false;\n        draft.removeCommentError = null;\n        break;\n      case ADD_COMMENT_SUCCESS:\n        {\n          var post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n          post.Comments.unshift(action.data);\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break;\n          // const postIndex = state.mainPosts.findIndex((y) => y.id === action.data.postId);\n          // const post = { ...state.mainPosts[postIndex] };\n          // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n          // const mainPosts = [...state.mainPosts];\n          // mainPosts[postIndex] = post;\n\n          // return {\n          //     ...state,\n          //     mainPosts,\n          //     addCommentLoading: false,\n          //     addCommentDone: true,\n          // };\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n      default:\n        break;\n    }\n  });\n};\nexport default reducer;","map":{"version":3,"names":["produce","initialState","mainPosts","imagePaths","hasMorePosts","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","shortId","addComment","reducer","state","action","draft","concat","length","error","unshift","filter","y","id","removeCommentLoading","removeCommentDone","removeCommentError","post","find","v","PostId","Comments"],"sources":["/Users/junmishin/Desktop/projects/nobird/front/reducers/post.js"],"sourcesContent":["import produce from 'immer';\n// import faker from 'faker';\n\n\n\nexport const initialState = {\n    mainPosts: [],\n    //업로드 하는 이미지 경로들\n    imagePaths: [],\n    //포스트 추가가 완료되면 true \n    hasMorePosts: true,\n    loadPostsLoading: false,\n    loadPostsDone: false,\n    loadPostsError: null,\n    addPostLoading: false,\n    addPostDone: false,\n    addPostError: null,\n    removePostLoading: false,\n    removePostDone: false,\n    removePostError: null,\n    addCommentLoading: false,\n    addCommentDone: false,\n    addCommentError: null,\n};\n\n\n// export const generateDummyPost = (number) => Array(number).fill().map(() => ({\n//     id: shortId.generate(),\n//     User: {\n//         id: shortId.generate(),\n//         nickname: faker.name.findName()\n//     },\n//     content: faker.lorem.paragraph(),\n//     Images: [{\n//         src: faker.image.image(),\n\n//     }],\n//     Comments: [{\n//         User: {\n//             id: shortId.generate(),\n//             nickname: faker.name.findName()\n//         },\n//         content: faker.lorem.sentence(),\n//     }],\n// }));\n\nexport const LIKE_POST_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LIKE_POST_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LIKE_POST_FAILURE = 'LOAD_POSTS_FAILURE';\n\n\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\n\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\n\n//액션크리에이터\nexport const addPost = (data) => ({\n    type: ADD_POST_REQUEST,\n    data\n});\nimport shortId from 'shortid'\n\n\nexport const addComment = (data) => ({\n    type: ADD_COMMENT_REQUEST,\n    data,\n});\n\n// export const dummyPost = (data) => ({\n//     id: data.id,\n//     content: data.content,\n//     User: {\n//         id: 1,\n//         nickname: 'Chloe'\n//     },\n//     Images: [{\n//         src: ''\n//     }],\n//     Comments: [],\n\n// });\n\n\n\n\n\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\n\n    switch (action.type) {\n        case LOAD_POSTS_REQUEST:\n            draft.loadPostsLoading = true;\n            draft.loadPostsDone = false;\n            draft.loadPostsError = null;\n            break;\n        case LOAD_POSTS_SUCCESS:\n            draft.mainPosts = draft.mainPosts.concat(action.data);\n            draft.hasMorePosts = draft.mainPosts.length < 50;\n            draft.loadPostsLoading = false;\n            draft.loadPostsDone = true;\n            break;\n        case LOAD_POSTS_FAILURE:\n            draft.loadPostsLoading = false;\n            draft.loadPostsError = action.error;\n            break;\n\n        case ADD_POST_REQUEST:\n            draft.addPostLoading = true;\n            draft.addPostDone = false;\n            draft.addPostError = null;\n            break;\n        case ADD_POST_SUCCESS:\n            draft.mainPosts.unshift(action.data);\n            draft.addPostLoading = false;\n            draft.addPostDone = true;\n            break;\n        case ADD_POST_FAILURE:\n            draft.addPostLoading = false;\n            draft.addPostError = action.error;\n            break;\n        case REMOVE_POST_REQUEST:\n            draft.removePostLoading = true;\n            draft.removePostDone = false;\n            draft.removePostError = null;\n            break;\n        case REMOVE_POST_SUCCESS:\n\n            draft.mainPosts = draft.mainPosts.filter((y) => y.id !== action.data);\n            draft.removePostLoading = false;\n            draft.removePostDone = true;\n            break;\n        case REMOVE_POST_FAILURE:\n            draft.removePostLoading = false;\n            draft.removePostError = action.error;\n            break;\n\n\n        case ADD_COMMENT_REQUEST:\n            draft.removeCommentLoading = true;\n            draft.removeCommentDone = false;\n            draft.removeCommentError = null;\n            break;\n        case ADD_COMMENT_SUCCESS: {\n            const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n            post.Comments.unshift(action.data);\n            draft.addCommentLoading = false;\n            draft.addCommentDone = true;\n            break;\n            // const postIndex = state.mainPosts.findIndex((y) => y.id === action.data.postId);\n            // const post = { ...state.mainPosts[postIndex] };\n            // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n            // const mainPosts = [...state.mainPosts];\n            // mainPosts[postIndex] = post;\n\n\n\n            // return {\n            //     ...state,\n            //     mainPosts,\n            //     addCommentLoading: false,\n            //     addCommentDone: true,\n            // };\n\n        }\n        case ADD_COMMENT_FAILURE:\n\n            draft.addCommentLoading = false;\n            draft.addCommentError = action.error;\n            break;\n        default:\n            break;\n    }\n\n});\n\n\n\n\n\nexport default reducer"],"mappings":"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"},"metadata":{},"sourceType":"module"}