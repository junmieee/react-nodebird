{"ast":null,"code":"import { all, delay, put, takeLatest, fork } from \"redux-saga/effects\";\nimport axios from \"axios\";\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\nfunction* addPost(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: Result.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n;\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\nfunction* addComment(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMET_SUCCESS,\n      data: Result.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_PCOMMETFAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n;\nfunction* watchCommentPost() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["all","delay","put","takeLatest","fork","axios","addPostAPI","data","post","addPost","action","type","ADD_POST_SUCCESS","Result","err","ADD_POST_FAILURE","response","addCommentAPI","postId","addComment","ADD_COMMET_SUCCESS","ADD_PCOMMETFAILURE","watchAddPost","ADD_POST_REQUEST","watchCommentPost","ADD_COMMENT_REQUEST","postSaga","watchAddComment"],"sources":["/Users/junmishin/Desktop/projects/nobird/front/sagas/post.js"],"sourcesContent":["import { all, delay, put, takeLatest, fork } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\n\nfunction addPostAPI(data) {\n    return axios.post('/api/post', data)\n}\n\nfunction* addPost(action) {\n    try {\n        yield delay(1000);\n        yield put({\n            type: ADD_POST_SUCCESS,\n            data: Result.data\n        });\n    }\n    catch (err) {\n        yield put({\n            type: ADD_POST_FAILURE,\n            data: err.response.data,\n        })\n    }\n};\n\nfunction addCommentAPI(data) {\n    return axios.post(`/api/post/${data.postId}/comment`, data)\n}\n\nfunction* addComment(action) {\n    try {\n        yield delay(1000);\n        yield put({\n            type: ADD_COMMET_SUCCESS,\n            data: Result.data\n        });\n    }\n    catch (err) {\n        yield put({\n            type: ADD_PCOMMETFAILURE,\n            data: err.response.data,\n        })\n    }\n}\n\n\n\nfunction* watchAddPost() {\n    yield takeLatest(ADD_POST_REQUEST, addPost);\n};\n\nfunction* watchCommentPost() {\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\n\n\n\n\n\nexport default function* postSaga() {\n    yield all([\n        fork(watchAddPost),\n        fork(watchAddComment)\n    ])\n} "],"mappings":"AAAA,SAASA,GAAG,EAAEC,KAAK,EAAEC,GAAG,EAAEC,UAAU,EAAEC,IAAI,QAAQ,oBAAoB;AACtE,OAAOC,KAAK,MAAM,OAAO;AAGzB,SAASC,UAAU,CAACC,IAAI,EAAE;EACtB,OAAOF,KAAK,CAACG,IAAI,CAAC,WAAW,EAAED,IAAI,CAAC;AACxC;AAEA,UAAUE,OAAO,CAACC,MAAM,EAAE;EACtB,IAAI;IACA,MAAMT,KAAK,CAAC,IAAI,CAAC;IACjB,MAAMC,GAAG,CAAC;MACNS,IAAI,EAAEC,gBAAgB;MACtBL,IAAI,EAAEM,MAAM,CAACN;IACjB,CAAC,CAAC;EACN,CAAC,CACD,OAAOO,GAAG,EAAE;IACR,MAAMZ,GAAG,CAAC;MACNS,IAAI,EAAEI,gBAAgB;MACtBR,IAAI,EAAEO,GAAG,CAACE,QAAQ,CAACT;IACvB,CAAC,CAAC;EACN;AACJ;AAAC;AAED,SAASU,aAAa,CAACV,IAAI,EAAE;EACzB,OAAOF,KAAK,CAACG,IAAI,CAAE,aAAYD,IAAI,CAACW,MAAO,UAAS,EAAEX,IAAI,CAAC;AAC/D;AAEA,UAAUY,UAAU,CAACT,MAAM,EAAE;EACzB,IAAI;IACA,MAAMT,KAAK,CAAC,IAAI,CAAC;IACjB,MAAMC,GAAG,CAAC;MACNS,IAAI,EAAES,kBAAkB;MACxBb,IAAI,EAAEM,MAAM,CAACN;IACjB,CAAC,CAAC;EACN,CAAC,CACD,OAAOO,GAAG,EAAE;IACR,MAAMZ,GAAG,CAAC;MACNS,IAAI,EAAEU,kBAAkB;MACxBd,IAAI,EAAEO,GAAG,CAACE,QAAQ,CAACT;IACvB,CAAC,CAAC;EACN;AACJ;AAIA,UAAUe,YAAY,GAAG;EACrB,MAAMnB,UAAU,CAACoB,gBAAgB,EAAEd,OAAO,CAAC;AAC/C;AAAC;AAED,UAAUe,gBAAgB,GAAG;EACzB,MAAMrB,UAAU,CAACsB,mBAAmB,EAAEN,UAAU,CAAC;AACrD;AAOA,eAAe,UAAUO,QAAQ,GAAG;EAChC,MAAM1B,GAAG,CAAC,CACNI,IAAI,CAACkB,YAAY,CAAC,EAClBlB,IAAI,CAACuB,eAAe,CAAC,CACxB,CAAC;AACN"},"metadata":{},"sourceType":"module"}