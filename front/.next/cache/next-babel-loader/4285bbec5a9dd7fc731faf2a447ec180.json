{"ast":null,"code":"import produce from 'immer';\n// import faker from 'faker';\n\nexport const initialState = {\n  mainPosts: [],\n  //업로드 하는 이미지 경로들\n  imagePaths: [],\n  //포스트 추가가 완료되면 true \n  hasMorePosts: true,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  retweetLoading: false,\n  retweetDone: false,\n  retweetError: null\n};\n\n// export const generateDummyPost = (number) => Array(number).fill().map(() => ({\n//     id: shortId.generate(),\n//     User: {\n//         id: shortId.generate(),\n//         nickname: faker.name.findName()\n//     },\n//     content: faker.lorem.paragraph(),\n//     Images: [{\n//         src: faker.image.image(),\n\n//     }],\n//     Comments: [{\n//         User: {\n//             id: shortId.generate(),\n//             nickname: faker.name.findName()\n//         },\n//         content: faker.lorem.sentence(),\n//     }],\n// }));\n\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\n\n//액션크리에이터\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nimport shortId from 'shortid';\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\n// export const dummyPost = (data) => ({\n//     id: data.id,\n//     content: data.content,\n//     User: {\n//         id: 1,\n//         nickname: 'Chloe'\n//     },\n//     Images: [{\n//         src: ''\n//     }],\n//     Comments: [],\n\n// });\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case REMOVE_IMAGE:\n      draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\n      break;\n    case RETWEET_REQUEST:\n      draft.retweetLoading = true;\n      draft.retweetDone = false;\n      draft.retweetError = null;\n      break;\n    case RETWEET_SUCCESS:\n      {\n        draft.imagePaths = action.data;\n        draft.retweetLoading = false;\n        draft.retweetDone = true;\n        break;\n      }\n    case RETWEET_FAILURE:\n      draft.retweetLoading = false;\n      draft.retweetError = action.error;\n      break;\n    case UPLOAD_IMAGES_REQUEST:\n      draft.uploadImagesLoading = true;\n      draft.uploadImagesDone = false;\n      draft.uploadImagesError = null;\n      break;\n    case UPLOAD_IMAGES_SUCCESS:\n      {\n        draft.imagePaths = action.data;\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesDone = true;\n        break;\n      }\n    case UPLOAD_IMAGES_FAILURE:\n      draft.uploadImagesLoading = false;\n      draft.uploadImagesError = action.error;\n      break;\n    case LIKE_POST_REQUEST:\n      draft.likePostLoading = true;\n      draft.likePostDone = false;\n      draft.likePostError = null;\n      break;\n    case LIKE_POST_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Likers.push({\n          id: action.data.UserId\n        });\n        draft.likePostLoading = false;\n        draft.likePostDone = true;\n        break;\n      }\n    case LIKE_POST_FAILURE:\n      draft.likePostLoading = false;\n      draft.likePostError = action.error;\n      break;\n    case UNLIKE_POST_REQUEST:\n      draft.unlikePostLoading = true;\n      draft.unlikePostDone = false;\n      draft.unlikePostError = null;\n      break;\n    case UNLIKE_POST_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Likers = post.Likers.filter(v => v.id !== action.data.UserId);\n        draft.unlikePostLoading = false;\n        draft.unlikePostDone = true;\n        break;\n      }\n    case UNLIKE_POST_FAILURE:\n      draft.loadPostsLoading = false;\n      draft.unlikePostError = action.error;\n      break;\n    case LOAD_POST_REQUEST:\n      draft.loadPostLoading = true;\n      draft.loadPostDone = false;\n      draft.loadPostError = null;\n      break;\n    case LOAD_POST_SUCCESS:\n      draft.loadPostLoading = false;\n      draft.loadPostDone = true;\n      draft.singlePost = action.data;\n      break;\n    case LOAD_POST_FAILURE:\n      draft.loadPostLoading = false;\n      draft.loadPostError = action.error;\n      break;\n    case LOAD_POSTS_REQUEST:\n      draft.loadPostsLoading = true;\n      draft.loadPostsDone = false;\n      draft.loadPostsError = null;\n      break;\n    case LOAD_POSTS_SUCCESS:\n      draft.loadPostsLoading = false;\n      draft.loadPostsDone = true;\n      draft.mainPosts = action.data.concat(draft.mainPosts);\n      draft.hasMorePosts = action.data.length === 10;\n      break;\n    case LOAD_POSTS_FAILURE:\n      draft.loadPostsLoading = false;\n      draft.loadPostsError = action.error;\n      break;\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n    case ADD_POST_SUCCESS:\n      draft.mainPosts.unshift(action.data);\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      draft.imagePaths = [];\n      break;\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostError = action.error;\n      break;\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostDone = false;\n      draft.removePostError = null;\n      break;\n    case REMOVE_POST_SUCCESS:\n      draft.mainPosts = draft.mainPosts.filter(y => y.id !== action.data.PostId);\n      draft.removePostLoading = false;\n      draft.removePostDone = true;\n      break;\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostError = action.error;\n      break;\n    case ADD_COMMENT_REQUEST:\n      draft.removeCommentLoading = true;\n      draft.removeCommentDone = false;\n      draft.removeCommentError = null;\n      break;\n    case ADD_COMMENT_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Comments.unshift(action.data);\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n        // const postIndex = state.mainPosts.findIndex((y) => y.id === action.data.postId);\n        // const post = { ...state.mainPosts[postIndex] };\n        // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n        // const mainPosts = [...state.mainPosts];\n        // mainPosts[postIndex] = post;\n\n        // return {\n        //     ...state,\n        //     mainPosts,\n        //     addCommentLoading: false,\n        //     addCommentDone: true,\n        // };\n      }\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentError = action.error;\n      break;\n    default:\n      break;\n  }\n});\nexport default reducer;","map":{"version":3,"names":["produce","initialState","mainPosts","imagePaths","hasMorePosts","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","loadPostLoading","loadPostDone","loadPostError","uploadImagesLoading","uploadImagesDone","uploadImagesError","retweetLoading","retweetDone","retweetError","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","REMOVE_IMAGE","addPost","data","type","shortId","addComment","reducer","state","action","draft","filter","v","i","error","post","find","id","PostId","Likers","push","UserId","singlePost","concat","length","unshift","y","removeCommentLoading","removeCommentDone","removeCommentError","Comments"],"sources":["/Users/junmishin/Desktop/projects/nobird/front/reducers/post.js"],"sourcesContent":["import produce from 'immer';\n// import faker from 'faker';\n\n\n\nexport const initialState = {\n    mainPosts: [],\n    //업로드 하는 이미지 경로들\n    imagePaths: [],\n    //포스트 추가가 완료되면 true \n    hasMorePosts: true,\n\n\n    likePostLoading: false,\n    likePostDone: false,\n    likePostError: null,\n    unlikePostLoading: false,\n    unlikePostDone: false,\n    unlikePostError: null,\n\n    loadPostsLoading: false,\n    loadPostsDone: false,\n    loadPostsError: null,\n    addPostLoading: false,\n    addPostDone: false,\n    addPostError: null,\n    removePostLoading: false,\n    removePostDone: false,\n    removePostError: null,\n    addCommentLoading: false,\n    addCommentDone: false,\n    addCommentError: null,\n    loadPostLoading: false,\n    loadPostDone: false,\n    loadPostError: null,\n\n    uploadImagesLoading: false,\n    uploadImagesDone: false,\n    uploadImagesError: null,\n\n    retweetLoading: false,\n    retweetDone: false,\n    retweetError: null,\n};\n\n\n// export const generateDummyPost = (number) => Array(number).fill().map(() => ({\n//     id: shortId.generate(),\n//     User: {\n//         id: shortId.generate(),\n//         nickname: faker.name.findName()\n//     },\n//     content: faker.lorem.paragraph(),\n//     Images: [{\n//         src: faker.image.image(),\n\n//     }],\n//     Comments: [{\n//         User: {\n//             id: shortId.generate(),\n//             nickname: faker.name.findName()\n//         },\n//         content: faker.lorem.sentence(),\n//     }],\n// }));\n\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\n\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\n\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\n\n\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\n\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\n\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\n\n\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\n\n\n\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\n\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\n\n\n//액션크리에이터\nexport const addPost = (data) => ({\n    type: ADD_POST_REQUEST,\n    data\n});\nimport shortId from 'shortid'\n\n\nexport const addComment = (data) => ({\n    type: ADD_COMMENT_REQUEST,\n    data,\n});\n\n// export const dummyPost = (data) => ({\n//     id: data.id,\n//     content: data.content,\n//     User: {\n//         id: 1,\n//         nickname: 'Chloe'\n//     },\n//     Images: [{\n//         src: ''\n//     }],\n//     Comments: [],\n\n// });\n\n\n\n\n\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\n\n    switch (action.type) {\n        case REMOVE_IMAGE:\n            draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data)\n            break;\n\n\n\n        case RETWEET_REQUEST:\n            draft.retweetLoading = true;\n            draft.retweetDone = false;\n            draft.retweetError = null;\n            break;\n        case RETWEET_SUCCESS: {\n            draft.imagePaths = action.data;\n            draft.retweetLoading = false;\n            draft.retweetDone = true;\n            break;\n        }\n        case RETWEET_FAILURE:\n            draft.retweetLoading = false;\n            draft.retweetError = action.error;\n            break;\n\n\n\n\n        case UPLOAD_IMAGES_REQUEST:\n            draft.uploadImagesLoading = true;\n            draft.uploadImagesDone = false;\n            draft.uploadImagesError = null;\n            break;\n        case UPLOAD_IMAGES_SUCCESS: {\n            draft.imagePaths = action.data;\n            draft.uploadImagesLoading = false;\n            draft.uploadImagesDone = true;\n            break;\n        }\n        case UPLOAD_IMAGES_FAILURE:\n            draft.uploadImagesLoading = false;\n            draft.uploadImagesError = action.error;\n            break;\n\n\n        case LIKE_POST_REQUEST:\n            draft.likePostLoading = true;\n            draft.likePostDone = false;\n            draft.likePostError = null;\n            break;\n        case LIKE_POST_SUCCESS: {\n            const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n            post.Likers.push({ id: action.data.UserId })\n\n            draft.likePostLoading = false;\n            draft.likePostDone = true;\n            break;\n        }\n        case LIKE_POST_FAILURE:\n            draft.likePostLoading = false;\n            draft.likePostError = action.error;\n            break;\n\n\n        case UNLIKE_POST_REQUEST:\n            draft.unlikePostLoading = true;\n            draft.unlikePostDone = false;\n            draft.unlikePostError = null;\n            break;\n        case UNLIKE_POST_SUCCESS: {\n            const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n            post.Likers = post.Likers.filter((v) => v.id !== action.data.UserId)\n\n            draft.unlikePostLoading = false;\n            draft.unlikePostDone = true;\n            break;\n        }\n        case UNLIKE_POST_FAILURE:\n            draft.loadPostsLoading = false;\n            draft.unlikePostError = action.error;\n            break;\n\n\n        case LOAD_POST_REQUEST:\n            draft.loadPostLoading = true;\n            draft.loadPostDone = false;\n            draft.loadPostError = null;\n            break;\n        case LOAD_POST_SUCCESS:\n            draft.loadPostLoading = false;\n            draft.loadPostDone = true;\n            draft.singlePost = action.data;\n            break;\n        case LOAD_POST_FAILURE:\n            draft.loadPostLoading = false;\n            draft.loadPostError = action.error;\n            break;\n\n\n\n        case LOAD_POSTS_REQUEST:\n            draft.loadPostsLoading = true;\n            draft.loadPostsDone = false;\n            draft.loadPostsError = null;\n            break;\n        case LOAD_POSTS_SUCCESS:\n            draft.loadPostsLoading = false;\n            draft.loadPostsDone = true;\n            draft.mainPosts = action.data.concat(draft.mainPosts);\n            draft.hasMorePosts = action.data.length === 10;\n            break;\n        case LOAD_POSTS_FAILURE:\n            draft.loadPostsLoading = false;\n            draft.loadPostsError = action.error;\n            break;\n\n        case ADD_POST_REQUEST:\n            draft.addPostLoading = true;\n            draft.addPostDone = false;\n            draft.addPostError = null;\n            break;\n        case ADD_POST_SUCCESS:\n            draft.mainPosts.unshift(action.data);\n            draft.addPostLoading = false;\n            draft.addPostDone = true;\n            draft.imagePaths = [];\n            break;\n        case ADD_POST_FAILURE:\n            draft.addPostLoading = false;\n            draft.addPostError = action.error;\n            break;\n        case REMOVE_POST_REQUEST:\n            draft.removePostLoading = true;\n            draft.removePostDone = false;\n            draft.removePostError = null;\n            break;\n        case REMOVE_POST_SUCCESS:\n\n            draft.mainPosts = draft.mainPosts.filter((y) => y.id !== action.data.PostId);\n            draft.removePostLoading = false;\n            draft.removePostDone = true;\n            break;\n        case REMOVE_POST_FAILURE:\n            draft.removePostLoading = false;\n            draft.removePostError = action.error;\n            break;\n\n\n        case ADD_COMMENT_REQUEST:\n            draft.removeCommentLoading = true;\n            draft.removeCommentDone = false;\n            draft.removeCommentError = null;\n            break;\n        case ADD_COMMENT_SUCCESS: {\n            const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n            post.Comments.unshift(action.data);\n            draft.addCommentLoading = false;\n            draft.addCommentDone = true;\n            break;\n            // const postIndex = state.mainPosts.findIndex((y) => y.id === action.data.postId);\n            // const post = { ...state.mainPosts[postIndex] };\n            // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n            // const mainPosts = [...state.mainPosts];\n            // mainPosts[postIndex] = post;\n\n\n\n            // return {\n            //     ...state,\n            //     mainPosts,\n            //     addCommentLoading: false,\n            //     addCommentDone: true,\n            // };\n\n        }\n        case ADD_COMMENT_FAILURE:\n\n            draft.addCommentLoading = false;\n            draft.addCommentError = action.error;\n            break;\n        default:\n            break;\n    }\n\n});\n\n\n\n\n\nexport default reducer"],"mappings":"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"},"metadata":{},"sourceType":"module"}