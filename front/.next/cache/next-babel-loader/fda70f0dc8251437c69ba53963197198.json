{"ast":null,"code":"import { all, delay, put, takeLatest, fork, throttle, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\nimport shorId from 'shortid';\nimport { generateDummyPost } from '../reducers/post';\nfunction likePostAPI(data) {\n  return axios.post('/post', {\n    content: data\n  });\n}\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n;\nfunction unlikePostAPI(data) {\n  return axios.post('/post', {\n    content: data\n  });\n}\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n;\nfunction addPostAPI(data) {\n  return axios.post('/post', {\n    content: data\n  });\n}\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n;\nfunction loadPostsAPI(data) {\n  return axios.get('/posts', data);\n}\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.data);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n;\nfunction removePostAPI(data) {\n  return axios.delete('/api/post', data);\n}\nfunction* removePost(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n;\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data); // POST /post/1/comment\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction* watchLikePost() {\n  yield throttle(2000, LIKE_POST_REQUEST, likePost);\n}\n;\nfunction* watchUnlikePost() {\n  yield throttle(2000, UNLIKE_POST_REQUEST, unlikePost);\n}\n;\nfunction* watchLoadPost() {\n  yield throttle(2000, LOAD_POSTS_REQUEST, loadPosts);\n}\n;\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n;\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n;\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nexport default function* postSaga() {\n  yield all([fork(watchLikePost), fork(watchUnlikePost), fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment), fork(watchLoadPost)]);\n}","map":{"version":3,"names":["all","delay","put","takeLatest","fork","throttle","call","axios","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","LIKE_POST_REQUEST","UNLIKE_POST_REQUEST","ADD_POST_TO_ME","REMOVE_POST_OF_ME","shorId","generateDummyPost","likePostAPI","data","post","content","likePost","action","result","type","id","err","response","unlikePostAPI","unlikePost","addPostAPI","addPost","loadPostsAPI","get","loadPosts","removePostAPI","delete","removePost","addCommentAPI","postId","addComment","console","error","watchLikePost","watchUnlikePost","watchLoadPost","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"sources":["/Users/junmishin/Desktop/projects/nobird/front/sagas/post.js"],"sourcesContent":["import { all, delay, put, takeLatest, fork, throttle, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport {\n    ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST,\n    ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST\n\n} from '../reducers/post'\n\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\nimport shorId from 'shortid';\nimport { generateDummyPost } from '../reducers/post'\n\n\n\n\nfunction likePostAPI(data) {\n    return axios.post('/post', { content: data })\n}\n\nfunction* likePost(action) {\n    try {\n        const result = yield call(likePostAPI, action.data);\n\n        yield put({\n            type: ADD_POST_SUCCESS,\n            data: result.data,\n        });\n        yield put({\n            type: ADD_POST_TO_ME,\n            data: result.data.id,\n        })\n    }\n    catch (err) {\n        yield put({\n            type: ADD_POST_FAILURE,\n            data: err.response.data,\n        })\n    }\n};\n\n\n\nfunction unlikePostAPI(data) {\n    return axios.post('/post', { content: data })\n}\n\nfunction* unlikePost(action) {\n    try {\n        const result = yield call(unlikePostAPI, action.data);\n\n        yield put({\n            type: ADD_POST_SUCCESS,\n            data: result.data,\n        });\n        yield put({\n            type: ADD_POST_TO_ME,\n            data: result.data.id,\n        })\n    }\n    catch (err) {\n        yield put({\n            type: ADD_POST_FAILURE,\n            data: err.response.data,\n        })\n    }\n};\n\n\n\nfunction addPostAPI(data) {\n    return axios.post('/post', { content: data })\n}\n\nfunction* addPost(action) {\n    try {\n        const result = yield call(addPostAPI, action.data);\n\n        yield put({\n            type: ADD_POST_SUCCESS,\n            data: result.data,\n        });\n        yield put({\n            type: ADD_POST_TO_ME,\n            data: result.data.id,\n        })\n    }\n    catch (err) {\n        yield put({\n            type: ADD_POST_FAILURE,\n            data: err.response.data,\n        })\n    }\n};\n\n\n\nfunction loadPostsAPI(data) {\n    return axios.get('/posts', data)\n}\n\nfunction* loadPosts(action) {\n    try {\n        const result = yield call(loadPostsAPI, action.data);\n        yield put({\n            type: LOAD_POSTS_SUCCESS,\n            data: result.data,\n        });\n\n    }\n    catch (err) {\n        yield put({\n            type: LOAD_POSTS_FAILURE,\n            data: err.response.data,\n        })\n    }\n};\n\n\n\nfunction removePostAPI(data) {\n    return axios.delete('/api/post', data)\n}\n\nfunction* removePost(action) {\n    try {\n        yield delay(1000);\n        yield put({\n            type: REMOVE_POST_SUCCESS,\n            data: action.data,\n        });\n        yield put({\n            type: REMOVE_POST_OF_ME,\n            data: action.data,\n        })\n    }\n    catch (err) {\n        yield put({\n            type: REMOVE_POST_FAILURE,\n            data: err.response.data,\n        })\n    }\n};\n\n\nfunction addCommentAPI(data) {\n    return axios.post(`/post/${data.postId}/comment`, data); // POST /post/1/comment\n}\n\nfunction* addComment(action) {\n    try {\n        const result = yield call(addCommentAPI, action.data);\n        yield put({\n            type: ADD_COMMENT_SUCCESS,\n            data: result.data,\n        });\n    } catch (err) {\n        console.error(err);\n        yield put({\n            type: ADD_COMMENT_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\n\n\nfunction* watchLikePost() {\n    yield throttle(2000, LIKE_POST_REQUEST, likePost);\n};\n\nfunction* watchUnlikePost() {\n    yield throttle(2000, UNLIKE_POST_REQUEST, unlikePost);\n};\n\n\nfunction* watchLoadPost() {\n    yield throttle(2000, LOAD_POSTS_REQUEST, loadPosts);\n};\n\nfunction* watchAddPost() {\n    yield takeLatest(ADD_POST_REQUEST, addPost);\n};\n\nfunction* watchRemovePost() {\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\n};\n\n\nfunction* watchAddComment() {\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\n\n\n\n\n\nexport default function* postSaga() {\n    yield all([\n        fork(watchLikePost),\n        fork(watchUnlikePost),\n        fork(watchAddPost),\n        fork(watchRemovePost),\n        fork(watchAddComment),\n        fork(watchLoadPost),\n    ])\n} "],"mappings":"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"},"metadata":{},"sourceType":"module"}